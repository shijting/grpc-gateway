syntax = "proto3";
package cameras_pb;
option go_package = ".;cameras_pb";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate.proto";
import "google/protobuf/empty.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Camera System OpenAPI";
    version: "v0.01";
  };
  external_docs: {
    url: "http://localhost:8001/";
    description: "Camera System Open API";
  }
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "X-Camera-Token"
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
      }
    }
  }
  security: {
    security_requirement: {
      key: "bearer"
    }
  }
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
};

service CameraService {
  // ShowCamera获取设备信息
  rpc ShowCamera(ShowCameraRequest)returns(Camera){
    option (google.api.http) = {
      get: "/v1/cameras/{camera_id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取设备信息",
      description: "根据设备id获取设备信息",
      tags: "设备"
    };
  }

  // UpdateCamera 更新设备信息
  rpc UpdateCamera(UpdateCameraRequest)returns(google.protobuf.Empty){
    option (google.api.http) = {
      put: "/v1/cameras/{camera_id}",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "更新设备信息",
      description: "根据设备id更新设备信息",
      tags: "设备"
    };
  };

  // ResetCamera 删除(重置)设备
  rpc ResetCamera(ResetCameraRequest)returns(google.protobuf.Empty){
    option (google.api.http) = {
      delete: "/v1/cameras/{camera_id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "删除设备信息",
      description: "根据设备id删除设备信息",
      tags: "设备"
    };
  };

  // BindCamera 绑定新设备
  rpc BindCamera(BindCameraRequest)returns(BindCameraResponse){
    option (google.api.http) = {
      post: "/v1/cameras/bind",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "绑定新设备",
      description: "绑定新设备",
      tags: "设备"
    };
  };

  // ListUserCamera 获取用户设备列表
  rpc ListUserCamera(google.protobuf.Empty) returns (ListUserCameraResponse){
    option (google.api.http) = {
      get: "/v1/user_cameras/users",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取用户设备列表",
      description: "获取用户设备列表",
      tags: "设备"
    };
  };

  // UpdateSharePermission 设置分享权限
  rpc UpdateSharePermission(UpdateSharePermissionRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      put: "/v1/user_cameras/{share_id}/permission",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "设置分享权限",
      description: "设置分享权限",
      tags: "设备"
    };
  };

  // AddShare 添加分享
  rpc AddShare(AddShareRequest)returns(google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/user_cameras/share",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "添加分享",
      description: "添加分享",
      tags: "设备"
    };
  };

  // CancelShare 取消分享
  rpc CancelShare(CancelShareRequest)returns(google.protobuf.Empty){
    option (google.api.http) = {
      delete: "/v1/user_cameras/share/{share_id}/cancel",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "取消分享",
      description: "取消分享",
      tags: "设备"
    };
  };

  // DeleteShare 删除分享
  rpc DeleteShare(DeleteShareRequest)returns(google.protobuf.Empty){
    option (google.api.http) = {
      delete: "/v1/user_cameras/share/{share_id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "删除分享",
      description: "删除分享",
      tags: "设备"
    };
  };
}

message Camera {
  uint32 id = 1;
  string no = 2;
  string name = 3;
  string model = 4 ;
  string mac = 5;
  string ip = 6;
  uint32 port = 7;
  uint32 user_id = 8;
  bool is_alarm = 10;
  int32 status = 11;
  int64 created_at = 12;
  int64 updated_at = 13;
}

message UserCamera {
  uint32 user_id = 1;
  int32 permission = 2;
  bool is_admin = 3;
  Camera camera = 4;
}

message ShowCameraRequest {
  uint32 camera_id = 1 [(validate.rules).uint32.gte = 1];
}

message CamerasResponse {
  string no = 1;
}

message UpdateCameraRequest {
  enum UpdateType {
    NONE = 0;
    PASSWORD = 1;
    IS_ALARM = 2;
    NAME = 3;
  }
  UpdateType update_type = 1;
  uint32 camera_id = 2 [(validate.rules).uint32.gte = 1];
  // 密码
  string password = 3;
  // 是否报警
  bool is_alarm = 4;
  // 自定义名称
  string name = 5;
}

message ResetCameraRequest {
  uint32 camera_id = 1 [(validate.rules).uint32.gte = 1];
}

// 绑定新设备
message BindCameraRequest {
  string no = 1 [(validate.rules).string.min_len = 1];
}

message BindCameraResponse {
  uint32 user_id = 1;
  uint32 is_success = 2;
  string phone_number = 3; // 脱敏的手机号码
}


message ListUserCameraResponse {
  repeated UserCamera user_cameras = 1;
}

message UpdateSharePermissionRequest {
  uint32 share_id = 1 [(validate.rules).uint32.gt = 0]; // user_camera_id
  uint32 user_id = 2 [(validate.rules).uint32.gt = 0]; // 被分享人id
  int32 permission = 3 [(validate.rules).int32.gte = 0];

}

// 添加分享
message AddShareRequest {
  uint32 camera_id = 1 [(validate.rules).uint32.gt = 0];
  uint32 user_id = 2 [(validate.rules).uint32.gt = 0];
  int32 permission = 3 [(validate.rules).int32.gte = 0];
}

// 取消分享
message CancelShareRequest {
  uint32 share_id = 1 [(validate.rules).uint32.gt = 0];
}

// 删除分享
message DeleteShareRequest {
  uint32 share_id = 1 [(validate.rules).uint32.gt = 0];
}
