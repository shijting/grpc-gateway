// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: cameras.proto

package cameras_pb

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type UpdateCameraRequest_UpdateType int32

const (
	UpdateCameraRequest_NONE     UpdateCameraRequest_UpdateType = 0
	UpdateCameraRequest_PASSWORD UpdateCameraRequest_UpdateType = 1
	UpdateCameraRequest_IS_ALARM UpdateCameraRequest_UpdateType = 2
	UpdateCameraRequest_NAME     UpdateCameraRequest_UpdateType = 3
)

// Enum value maps for UpdateCameraRequest_UpdateType.
var (
	UpdateCameraRequest_UpdateType_name = map[int32]string{
		0: "NONE",
		1: "PASSWORD",
		2: "IS_ALARM",
		3: "NAME",
	}
	UpdateCameraRequest_UpdateType_value = map[string]int32{
		"NONE":     0,
		"PASSWORD": 1,
		"IS_ALARM": 2,
		"NAME":     3,
	}
)

func (x UpdateCameraRequest_UpdateType) Enum() *UpdateCameraRequest_UpdateType {
	p := new(UpdateCameraRequest_UpdateType)
	*p = x
	return p
}

func (x UpdateCameraRequest_UpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateCameraRequest_UpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_cameras_proto_enumTypes[0].Descriptor()
}

func (UpdateCameraRequest_UpdateType) Type() protoreflect.EnumType {
	return &file_cameras_proto_enumTypes[0]
}

func (x UpdateCameraRequest_UpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateCameraRequest_UpdateType.Descriptor instead.
func (UpdateCameraRequest_UpdateType) EnumDescriptor() ([]byte, []int) {
	return file_cameras_proto_rawDescGZIP(), []int{4, 0}
}

type Camera struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	No        string `protobuf:"bytes,2,opt,name=no,proto3" json:"no,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Model     string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	Mac       string `protobuf:"bytes,5,opt,name=mac,proto3" json:"mac,omitempty"`
	Ip        string `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	Port      uint32 `protobuf:"varint,7,opt,name=port,proto3" json:"port,omitempty"`
	UserId    uint32 `protobuf:"varint,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsAlarm   bool   `protobuf:"varint,10,opt,name=is_alarm,json=isAlarm,proto3" json:"is_alarm,omitempty"`
	Status    int32  `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt int64  `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64  `protobuf:"varint,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Camera) Reset() {
	*x = Camera{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cameras_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Camera) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Camera) ProtoMessage() {}

func (x *Camera) ProtoReflect() protoreflect.Message {
	mi := &file_cameras_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Camera.ProtoReflect.Descriptor instead.
func (*Camera) Descriptor() ([]byte, []int) {
	return file_cameras_proto_rawDescGZIP(), []int{0}
}

func (x *Camera) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Camera) GetNo() string {
	if x != nil {
		return x.No
	}
	return ""
}

func (x *Camera) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Camera) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Camera) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *Camera) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Camera) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Camera) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Camera) GetIsAlarm() bool {
	if x != nil {
		return x.IsAlarm
	}
	return false
}

func (x *Camera) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Camera) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Camera) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type UserCamera struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     uint32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Permission int32   `protobuf:"varint,2,opt,name=permission,proto3" json:"permission,omitempty"`
	IsAdmin    bool    `protobuf:"varint,3,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	Camera     *Camera `protobuf:"bytes,4,opt,name=camera,proto3" json:"camera,omitempty"`
}

func (x *UserCamera) Reset() {
	*x = UserCamera{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cameras_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCamera) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCamera) ProtoMessage() {}

func (x *UserCamera) ProtoReflect() protoreflect.Message {
	mi := &file_cameras_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCamera.ProtoReflect.Descriptor instead.
func (*UserCamera) Descriptor() ([]byte, []int) {
	return file_cameras_proto_rawDescGZIP(), []int{1}
}

func (x *UserCamera) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserCamera) GetPermission() int32 {
	if x != nil {
		return x.Permission
	}
	return 0
}

func (x *UserCamera) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *UserCamera) GetCamera() *Camera {
	if x != nil {
		return x.Camera
	}
	return nil
}

type ShowCameraRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraId uint32 `protobuf:"varint,1,opt,name=camera_id,json=cameraId,proto3" json:"camera_id,omitempty"`
}

func (x *ShowCameraRequest) Reset() {
	*x = ShowCameraRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cameras_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowCameraRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowCameraRequest) ProtoMessage() {}

func (x *ShowCameraRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cameras_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowCameraRequest.ProtoReflect.Descriptor instead.
func (*ShowCameraRequest) Descriptor() ([]byte, []int) {
	return file_cameras_proto_rawDescGZIP(), []int{2}
}

func (x *ShowCameraRequest) GetCameraId() uint32 {
	if x != nil {
		return x.CameraId
	}
	return 0
}

type CamerasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	No string `protobuf:"bytes,1,opt,name=no,proto3" json:"no,omitempty"`
}

func (x *CamerasResponse) Reset() {
	*x = CamerasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cameras_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CamerasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CamerasResponse) ProtoMessage() {}

func (x *CamerasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cameras_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CamerasResponse.ProtoReflect.Descriptor instead.
func (*CamerasResponse) Descriptor() ([]byte, []int) {
	return file_cameras_proto_rawDescGZIP(), []int{3}
}

func (x *CamerasResponse) GetNo() string {
	if x != nil {
		return x.No
	}
	return ""
}

type UpdateCameraRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateType UpdateCameraRequest_UpdateType `protobuf:"varint,1,opt,name=update_type,json=updateType,proto3,enum=cameras_pb.UpdateCameraRequest_UpdateType" json:"update_type,omitempty"`
	CameraId   uint32                         `protobuf:"varint,2,opt,name=camera_id,json=cameraId,proto3" json:"camera_id,omitempty"`
	// 密码
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// 是否报警
	IsAlarm bool `protobuf:"varint,4,opt,name=is_alarm,json=isAlarm,proto3" json:"is_alarm,omitempty"`
	// 自定义名称
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateCameraRequest) Reset() {
	*x = UpdateCameraRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cameras_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCameraRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCameraRequest) ProtoMessage() {}

func (x *UpdateCameraRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cameras_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCameraRequest.ProtoReflect.Descriptor instead.
func (*UpdateCameraRequest) Descriptor() ([]byte, []int) {
	return file_cameras_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateCameraRequest) GetUpdateType() UpdateCameraRequest_UpdateType {
	if x != nil {
		return x.UpdateType
	}
	return UpdateCameraRequest_NONE
}

func (x *UpdateCameraRequest) GetCameraId() uint32 {
	if x != nil {
		return x.CameraId
	}
	return 0
}

func (x *UpdateCameraRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UpdateCameraRequest) GetIsAlarm() bool {
	if x != nil {
		return x.IsAlarm
	}
	return false
}

func (x *UpdateCameraRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ResetCameraRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraId uint32 `protobuf:"varint,1,opt,name=camera_id,json=cameraId,proto3" json:"camera_id,omitempty"`
}

func (x *ResetCameraRequest) Reset() {
	*x = ResetCameraRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cameras_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCameraRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCameraRequest) ProtoMessage() {}

func (x *ResetCameraRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cameras_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCameraRequest.ProtoReflect.Descriptor instead.
func (*ResetCameraRequest) Descriptor() ([]byte, []int) {
	return file_cameras_proto_rawDescGZIP(), []int{5}
}

func (x *ResetCameraRequest) GetCameraId() uint32 {
	if x != nil {
		return x.CameraId
	}
	return 0
}

// 绑定新设备
type BindCameraRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	No string `protobuf:"bytes,1,opt,name=no,proto3" json:"no,omitempty"`
}

func (x *BindCameraRequest) Reset() {
	*x = BindCameraRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cameras_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindCameraRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindCameraRequest) ProtoMessage() {}

func (x *BindCameraRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cameras_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindCameraRequest.ProtoReflect.Descriptor instead.
func (*BindCameraRequest) Descriptor() ([]byte, []int) {
	return file_cameras_proto_rawDescGZIP(), []int{6}
}

func (x *BindCameraRequest) GetNo() string {
	if x != nil {
		return x.No
	}
	return ""
}

type BindCameraResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsSuccess   uint32 `protobuf:"varint,2,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	PhoneNumber string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"` // 脱敏的手机号码
}

func (x *BindCameraResponse) Reset() {
	*x = BindCameraResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cameras_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindCameraResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindCameraResponse) ProtoMessage() {}

func (x *BindCameraResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cameras_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindCameraResponse.ProtoReflect.Descriptor instead.
func (*BindCameraResponse) Descriptor() ([]byte, []int) {
	return file_cameras_proto_rawDescGZIP(), []int{7}
}

func (x *BindCameraResponse) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BindCameraResponse) GetIsSuccess() uint32 {
	if x != nil {
		return x.IsSuccess
	}
	return 0
}

func (x *BindCameraResponse) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

type ListUserCameraResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserCameras []*UserCamera `protobuf:"bytes,1,rep,name=user_cameras,json=userCameras,proto3" json:"user_cameras,omitempty"`
}

func (x *ListUserCameraResponse) Reset() {
	*x = ListUserCameraResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cameras_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserCameraResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserCameraResponse) ProtoMessage() {}

func (x *ListUserCameraResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cameras_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserCameraResponse.ProtoReflect.Descriptor instead.
func (*ListUserCameraResponse) Descriptor() ([]byte, []int) {
	return file_cameras_proto_rawDescGZIP(), []int{8}
}

func (x *ListUserCameraResponse) GetUserCameras() []*UserCamera {
	if x != nil {
		return x.UserCameras
	}
	return nil
}

type UpdateSharePermissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareId    uint32 `protobuf:"varint,1,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"` // user_camera_id
	UserId     uint32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`    // 被分享人id
	Permission int32  `protobuf:"varint,3,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *UpdateSharePermissionRequest) Reset() {
	*x = UpdateSharePermissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cameras_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSharePermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSharePermissionRequest) ProtoMessage() {}

func (x *UpdateSharePermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cameras_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSharePermissionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSharePermissionRequest) Descriptor() ([]byte, []int) {
	return file_cameras_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateSharePermissionRequest) GetShareId() uint32 {
	if x != nil {
		return x.ShareId
	}
	return 0
}

func (x *UpdateSharePermissionRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateSharePermissionRequest) GetPermission() int32 {
	if x != nil {
		return x.Permission
	}
	return 0
}

// 添加分享
type AddShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraId   uint32 `protobuf:"varint,1,opt,name=camera_id,json=cameraId,proto3" json:"camera_id,omitempty"`
	UserId     uint32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Permission int32  `protobuf:"varint,3,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *AddShareRequest) Reset() {
	*x = AddShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cameras_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddShareRequest) ProtoMessage() {}

func (x *AddShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cameras_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddShareRequest.ProtoReflect.Descriptor instead.
func (*AddShareRequest) Descriptor() ([]byte, []int) {
	return file_cameras_proto_rawDescGZIP(), []int{10}
}

func (x *AddShareRequest) GetCameraId() uint32 {
	if x != nil {
		return x.CameraId
	}
	return 0
}

func (x *AddShareRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddShareRequest) GetPermission() int32 {
	if x != nil {
		return x.Permission
	}
	return 0
}

// 取消分享
type CancelShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareId uint32 `protobuf:"varint,1,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
}

func (x *CancelShareRequest) Reset() {
	*x = CancelShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cameras_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelShareRequest) ProtoMessage() {}

func (x *CancelShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cameras_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelShareRequest.ProtoReflect.Descriptor instead.
func (*CancelShareRequest) Descriptor() ([]byte, []int) {
	return file_cameras_proto_rawDescGZIP(), []int{11}
}

func (x *CancelShareRequest) GetShareId() uint32 {
	if x != nil {
		return x.ShareId
	}
	return 0
}

// 删除分享
type DeleteShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareId uint32 `protobuf:"varint,1,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
}

func (x *DeleteShareRequest) Reset() {
	*x = DeleteShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cameras_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShareRequest) ProtoMessage() {}

func (x *DeleteShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cameras_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShareRequest.ProtoReflect.Descriptor instead.
func (*DeleteShareRequest) Descriptor() ([]byte, []int) {
	return file_cameras_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteShareRequest) GetShareId() uint32 {
	if x != nil {
		return x.ShareId
	}
	return 0
}

var File_cameras_proto protoreflect.FileDescriptor

var file_cameras_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x5f, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x02, 0x0a, 0x06, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6e,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x61, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x0a,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x2a,
	0x0a, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x22, 0x39, 0x0a, 0x11, 0x53, 0x68,
	0x6f, 0x77, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x09, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x01, 0x52, 0x08, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x0f, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6e, 0x6f, 0x22, 0x91, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x5f,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x09, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x01, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3c,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f,
	0x52, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x22, 0x3a, 0x0a, 0x12,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x01, 0x52, 0x08,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x11, 0x42, 0x69, 0x6e, 0x64,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x02, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x02, 0x6e, 0x6f, 0x22, 0x6f, 0x0a, 0x12, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x53, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x73, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x22, 0x8d, 0x01, 0x0a,
	0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00,
	0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x01, 0x0a,
	0x0f, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x09, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x08, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x38, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02,
	0x20, 0x00, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x07, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x49, 0x64, 0x32, 0xdb, 0x0b, 0x0a, 0x0d, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x77,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x1d, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73,
	0x5f, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x5f,
	0x70, 0x62, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x2f, 0x7b,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x3e, 0x0a, 0x06, 0xe8,
	0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x12, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xae, 0xbe,
	0xe5, 0xa4, 0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x20, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d,
	0xae, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x69, 0x64, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8,
	0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0xac, 0x01, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x1f, 0x2e, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x63, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x1a, 0x17, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x3e, 0x0a, 0x06, 0xe8, 0xae,
	0xbe, 0xe5, 0xa4, 0x87, 0x12, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x20, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x69, 0x64, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0xae,
	0xbe, 0xe5, 0xa4, 0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0xa7, 0x01, 0x0a, 0x0b, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x1e, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x69, 0x64, 0x7d, 0x92, 0x41, 0x3e, 0x0a, 0x06, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x12, 0x12,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x1a, 0x20, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87,
	0x69, 0x64, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x12, 0x95, 0x01, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x12, 0x1d, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x5f, 0x70, 0x62,
	0x2e, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x5f, 0x70, 0x62, 0x2e,
	0x42, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x2f, 0x62, 0x69, 0x6e, 0x64, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x2a, 0x0a, 0x06, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x12, 0x0f, 0xe7, 0xbb, 0x91, 0xe5,
	0xae, 0x9a, 0xe6, 0x96, 0xb0, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x1a, 0x0f, 0xe7, 0xbb, 0x91,
	0xe5, 0xae, 0x9a, 0xe6, 0x96, 0xb0, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x12, 0xab, 0x01, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x73, 0x5f, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x92, 0x41, 0x3c, 0x0a, 0x06,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x12, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x1a, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xae,
	0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xbf, 0x01, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x5f, 0x70,
	0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x1a, 0x26,
	0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73,
	0x2f, 0x7b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x30, 0x0a, 0x06, 0xe8, 0xae,
	0xbe, 0xe5, 0xa4, 0x87, 0x12, 0x12, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe5, 0x88, 0x86, 0xe4,
	0xba, 0xab, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x1a, 0x12, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae,
	0xe5, 0x88, 0x86, 0xe4, 0xba, 0xab, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x12, 0x89, 0x01, 0x0a,
	0x08, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1b, 0x2e, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x3a, 0x01,
	0x2a, 0x92, 0x41, 0x24, 0x0a, 0x06, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x12, 0x0c, 0xe6, 0xb7,
	0xbb, 0xe5, 0x8a, 0xa0, 0xe5, 0x88, 0x86, 0xe4, 0xba, 0xab, 0x1a, 0x0c, 0xe6, 0xb7, 0xbb, 0xe5,
	0x8a, 0xa0, 0xe5, 0x88, 0x86, 0xe4, 0xba, 0xab, 0x12, 0x9e, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x2a, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x2f, 0x7b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x92, 0x41, 0x24, 0x0a, 0x06, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x12, 0x0c, 0xe5,
	0x8f, 0x96, 0xe6, 0xb6, 0x88, 0xe5, 0x88, 0x86, 0xe4, 0xba, 0xab, 0x1a, 0x0c, 0xe5, 0x8f, 0x96,
	0xe6, 0xb6, 0x88, 0xe5, 0x88, 0x86, 0xe4, 0xba, 0xab, 0x12, 0x97, 0x01, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x2f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x2f, 0x7b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x24, 0x0a,
	0x06, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x12, 0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5,
	0x88, 0x86, 0xe4, 0xba, 0xab, 0x1a, 0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0x88, 0x86,
	0xe4, 0xba, 0xab, 0x42, 0xf5, 0x01, 0x5a, 0x0c, 0x2e, 0x3b, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x73, 0x5f, 0x70, 0x62, 0x92, 0x41, 0xe3, 0x01, 0x12, 0x1e, 0x0a, 0x15, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50,
	0x49, 0x32, 0x05, 0x76, 0x30, 0x2e, 0x30, 0x31, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a,
	0x5a, 0x0a, 0x58, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x4e, 0x08, 0x02, 0x12,
	0x38, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x20,
	0x62, 0x79, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65,
	0x72, 0x20, 0x3c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a, 0x0e, 0x58, 0x2d, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x02, 0x62, 0x0c, 0x0a, 0x0a, 0x0a,
	0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x00, 0x72, 0x30, 0x0a, 0x16, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x4f, 0x70, 0x65, 0x6e, 0x20,
	0x41, 0x50, 0x49, 0x12, 0x16, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x38, 0x30, 0x30, 0x31, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_cameras_proto_rawDescOnce sync.Once
	file_cameras_proto_rawDescData = file_cameras_proto_rawDesc
)

func file_cameras_proto_rawDescGZIP() []byte {
	file_cameras_proto_rawDescOnce.Do(func() {
		file_cameras_proto_rawDescData = protoimpl.X.CompressGZIP(file_cameras_proto_rawDescData)
	})
	return file_cameras_proto_rawDescData
}

var file_cameras_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cameras_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_cameras_proto_goTypes = []interface{}{
	(UpdateCameraRequest_UpdateType)(0),  // 0: cameras_pb.UpdateCameraRequest.UpdateType
	(*Camera)(nil),                       // 1: cameras_pb.Camera
	(*UserCamera)(nil),                   // 2: cameras_pb.UserCamera
	(*ShowCameraRequest)(nil),            // 3: cameras_pb.ShowCameraRequest
	(*CamerasResponse)(nil),              // 4: cameras_pb.CamerasResponse
	(*UpdateCameraRequest)(nil),          // 5: cameras_pb.UpdateCameraRequest
	(*ResetCameraRequest)(nil),           // 6: cameras_pb.ResetCameraRequest
	(*BindCameraRequest)(nil),            // 7: cameras_pb.BindCameraRequest
	(*BindCameraResponse)(nil),           // 8: cameras_pb.BindCameraResponse
	(*ListUserCameraResponse)(nil),       // 9: cameras_pb.ListUserCameraResponse
	(*UpdateSharePermissionRequest)(nil), // 10: cameras_pb.UpdateSharePermissionRequest
	(*AddShareRequest)(nil),              // 11: cameras_pb.AddShareRequest
	(*CancelShareRequest)(nil),           // 12: cameras_pb.CancelShareRequest
	(*DeleteShareRequest)(nil),           // 13: cameras_pb.DeleteShareRequest
	(*empty.Empty)(nil),                  // 14: google.protobuf.Empty
}
var file_cameras_proto_depIdxs = []int32{
	1,  // 0: cameras_pb.UserCamera.camera:type_name -> cameras_pb.Camera
	0,  // 1: cameras_pb.UpdateCameraRequest.update_type:type_name -> cameras_pb.UpdateCameraRequest.UpdateType
	2,  // 2: cameras_pb.ListUserCameraResponse.user_cameras:type_name -> cameras_pb.UserCamera
	3,  // 3: cameras_pb.CameraService.ShowCamera:input_type -> cameras_pb.ShowCameraRequest
	5,  // 4: cameras_pb.CameraService.UpdateCamera:input_type -> cameras_pb.UpdateCameraRequest
	6,  // 5: cameras_pb.CameraService.ResetCamera:input_type -> cameras_pb.ResetCameraRequest
	7,  // 6: cameras_pb.CameraService.BindCamera:input_type -> cameras_pb.BindCameraRequest
	14, // 7: cameras_pb.CameraService.ListUserCamera:input_type -> google.protobuf.Empty
	10, // 8: cameras_pb.CameraService.UpdateSharePermission:input_type -> cameras_pb.UpdateSharePermissionRequest
	11, // 9: cameras_pb.CameraService.AddShare:input_type -> cameras_pb.AddShareRequest
	12, // 10: cameras_pb.CameraService.CancelShare:input_type -> cameras_pb.CancelShareRequest
	13, // 11: cameras_pb.CameraService.DeleteShare:input_type -> cameras_pb.DeleteShareRequest
	1,  // 12: cameras_pb.CameraService.ShowCamera:output_type -> cameras_pb.Camera
	14, // 13: cameras_pb.CameraService.UpdateCamera:output_type -> google.protobuf.Empty
	14, // 14: cameras_pb.CameraService.ResetCamera:output_type -> google.protobuf.Empty
	8,  // 15: cameras_pb.CameraService.BindCamera:output_type -> cameras_pb.BindCameraResponse
	9,  // 16: cameras_pb.CameraService.ListUserCamera:output_type -> cameras_pb.ListUserCameraResponse
	14, // 17: cameras_pb.CameraService.UpdateSharePermission:output_type -> google.protobuf.Empty
	14, // 18: cameras_pb.CameraService.AddShare:output_type -> google.protobuf.Empty
	14, // 19: cameras_pb.CameraService.CancelShare:output_type -> google.protobuf.Empty
	14, // 20: cameras_pb.CameraService.DeleteShare:output_type -> google.protobuf.Empty
	12, // [12:21] is the sub-list for method output_type
	3,  // [3:12] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_cameras_proto_init() }
func file_cameras_proto_init() {
	if File_cameras_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cameras_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Camera); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cameras_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCamera); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cameras_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowCameraRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cameras_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CamerasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cameras_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCameraRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cameras_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCameraRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cameras_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindCameraRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cameras_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindCameraResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cameras_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserCameraResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cameras_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSharePermissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cameras_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cameras_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cameras_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cameras_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cameras_proto_goTypes,
		DependencyIndexes: file_cameras_proto_depIdxs,
		EnumInfos:         file_cameras_proto_enumTypes,
		MessageInfos:      file_cameras_proto_msgTypes,
	}.Build()
	File_cameras_proto = out.File
	file_cameras_proto_rawDesc = nil
	file_cameras_proto_goTypes = nil
	file_cameras_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CameraServiceClient is the client API for CameraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CameraServiceClient interface {
	// ShowCamera获取设备信息
	ShowCamera(ctx context.Context, in *ShowCameraRequest, opts ...grpc.CallOption) (*Camera, error)
	// UpdateCamera 更新设备信息
	UpdateCamera(ctx context.Context, in *UpdateCameraRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ResetCamera 删除(重置)设备
	ResetCamera(ctx context.Context, in *ResetCameraRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// BindCamera 绑定新设备
	BindCamera(ctx context.Context, in *BindCameraRequest, opts ...grpc.CallOption) (*BindCameraResponse, error)
	// ListUserCamera 获取用户设备列表
	ListUserCamera(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListUserCameraResponse, error)
	// UpdateSharePermission 设置分享权限
	UpdateSharePermission(ctx context.Context, in *UpdateSharePermissionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// AddShare 添加分享
	AddShare(ctx context.Context, in *AddShareRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CancelShare 取消分享
	CancelShare(ctx context.Context, in *CancelShareRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DeleteShare 删除分享
	DeleteShare(ctx context.Context, in *DeleteShareRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type cameraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCameraServiceClient(cc grpc.ClientConnInterface) CameraServiceClient {
	return &cameraServiceClient{cc}
}

func (c *cameraServiceClient) ShowCamera(ctx context.Context, in *ShowCameraRequest, opts ...grpc.CallOption) (*Camera, error) {
	out := new(Camera)
	err := c.cc.Invoke(ctx, "/cameras_pb.CameraService/ShowCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) UpdateCamera(ctx context.Context, in *UpdateCameraRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cameras_pb.CameraService/UpdateCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) ResetCamera(ctx context.Context, in *ResetCameraRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cameras_pb.CameraService/ResetCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) BindCamera(ctx context.Context, in *BindCameraRequest, opts ...grpc.CallOption) (*BindCameraResponse, error) {
	out := new(BindCameraResponse)
	err := c.cc.Invoke(ctx, "/cameras_pb.CameraService/BindCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) ListUserCamera(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListUserCameraResponse, error) {
	out := new(ListUserCameraResponse)
	err := c.cc.Invoke(ctx, "/cameras_pb.CameraService/ListUserCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) UpdateSharePermission(ctx context.Context, in *UpdateSharePermissionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cameras_pb.CameraService/UpdateSharePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) AddShare(ctx context.Context, in *AddShareRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cameras_pb.CameraService/AddShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) CancelShare(ctx context.Context, in *CancelShareRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cameras_pb.CameraService/CancelShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) DeleteShare(ctx context.Context, in *DeleteShareRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cameras_pb.CameraService/DeleteShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CameraServiceServer is the server API for CameraService service.
type CameraServiceServer interface {
	// ShowCamera获取设备信息
	ShowCamera(context.Context, *ShowCameraRequest) (*Camera, error)
	// UpdateCamera 更新设备信息
	UpdateCamera(context.Context, *UpdateCameraRequest) (*empty.Empty, error)
	// ResetCamera 删除(重置)设备
	ResetCamera(context.Context, *ResetCameraRequest) (*empty.Empty, error)
	// BindCamera 绑定新设备
	BindCamera(context.Context, *BindCameraRequest) (*BindCameraResponse, error)
	// ListUserCamera 获取用户设备列表
	ListUserCamera(context.Context, *empty.Empty) (*ListUserCameraResponse, error)
	// UpdateSharePermission 设置分享权限
	UpdateSharePermission(context.Context, *UpdateSharePermissionRequest) (*empty.Empty, error)
	// AddShare 添加分享
	AddShare(context.Context, *AddShareRequest) (*empty.Empty, error)
	// CancelShare 取消分享
	CancelShare(context.Context, *CancelShareRequest) (*empty.Empty, error)
	// DeleteShare 删除分享
	DeleteShare(context.Context, *DeleteShareRequest) (*empty.Empty, error)
}

// UnimplementedCameraServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCameraServiceServer struct {
}

func (*UnimplementedCameraServiceServer) ShowCamera(context.Context, *ShowCameraRequest) (*Camera, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCamera not implemented")
}
func (*UnimplementedCameraServiceServer) UpdateCamera(context.Context, *UpdateCameraRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCamera not implemented")
}
func (*UnimplementedCameraServiceServer) ResetCamera(context.Context, *ResetCameraRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCamera not implemented")
}
func (*UnimplementedCameraServiceServer) BindCamera(context.Context, *BindCameraRequest) (*BindCameraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindCamera not implemented")
}
func (*UnimplementedCameraServiceServer) ListUserCamera(context.Context, *empty.Empty) (*ListUserCameraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserCamera not implemented")
}
func (*UnimplementedCameraServiceServer) UpdateSharePermission(context.Context, *UpdateSharePermissionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSharePermission not implemented")
}
func (*UnimplementedCameraServiceServer) AddShare(context.Context, *AddShareRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShare not implemented")
}
func (*UnimplementedCameraServiceServer) CancelShare(context.Context, *CancelShareRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelShare not implemented")
}
func (*UnimplementedCameraServiceServer) DeleteShare(context.Context, *DeleteShareRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShare not implemented")
}

func RegisterCameraServiceServer(s *grpc.Server, srv CameraServiceServer) {
	s.RegisterService(&_CameraService_serviceDesc, srv)
}

func _CameraService_ShowCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).ShowCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cameras_pb.CameraService/ShowCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).ShowCamera(ctx, req.(*ShowCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_UpdateCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).UpdateCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cameras_pb.CameraService/UpdateCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).UpdateCamera(ctx, req.(*UpdateCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_ResetCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).ResetCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cameras_pb.CameraService/ResetCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).ResetCamera(ctx, req.(*ResetCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_BindCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).BindCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cameras_pb.CameraService/BindCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).BindCamera(ctx, req.(*BindCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_ListUserCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).ListUserCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cameras_pb.CameraService/ListUserCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).ListUserCamera(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_UpdateSharePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSharePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).UpdateSharePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cameras_pb.CameraService/UpdateSharePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).UpdateSharePermission(ctx, req.(*UpdateSharePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_AddShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).AddShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cameras_pb.CameraService/AddShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).AddShare(ctx, req.(*AddShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_CancelShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).CancelShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cameras_pb.CameraService/CancelShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).CancelShare(ctx, req.(*CancelShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_DeleteShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).DeleteShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cameras_pb.CameraService/DeleteShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).DeleteShare(ctx, req.(*DeleteShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CameraService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cameras_pb.CameraService",
	HandlerType: (*CameraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowCamera",
			Handler:    _CameraService_ShowCamera_Handler,
		},
		{
			MethodName: "UpdateCamera",
			Handler:    _CameraService_UpdateCamera_Handler,
		},
		{
			MethodName: "ResetCamera",
			Handler:    _CameraService_ResetCamera_Handler,
		},
		{
			MethodName: "BindCamera",
			Handler:    _CameraService_BindCamera_Handler,
		},
		{
			MethodName: "ListUserCamera",
			Handler:    _CameraService_ListUserCamera_Handler,
		},
		{
			MethodName: "UpdateSharePermission",
			Handler:    _CameraService_UpdateSharePermission_Handler,
		},
		{
			MethodName: "AddShare",
			Handler:    _CameraService_AddShare_Handler,
		},
		{
			MethodName: "CancelShare",
			Handler:    _CameraService_CancelShare_Handler,
		},
		{
			MethodName: "DeleteShare",
			Handler:    _CameraService_DeleteShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cameras.proto",
}
