// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cameras.proto

package cameras_pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _cameras_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Camera with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Camera) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for No

	// no validation rules for Name

	// no validation rules for Model

	// no validation rules for Mac

	// no validation rules for Ip

	// no validation rules for Port

	// no validation rules for UserId

	// no validation rules for IsAlarm

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	return nil
}

// CameraValidationError is the validation error returned by Camera.Validate if
// the designated constraints aren't met.
type CameraValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CameraValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CameraValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CameraValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CameraValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CameraValidationError) ErrorName() string { return "CameraValidationError" }

// Error satisfies the builtin error interface
func (e CameraValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCamera.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CameraValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CameraValidationError{}

// Validate checks the field values on UserCamera with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UserCamera) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Permission

	// no validation rules for IsAdmin

	if v, ok := interface{}(m.GetCamera()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserCameraValidationError{
				field:  "Camera",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UserCameraValidationError is the validation error returned by
// UserCamera.Validate if the designated constraints aren't met.
type UserCameraValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCameraValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCameraValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCameraValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCameraValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCameraValidationError) ErrorName() string { return "UserCameraValidationError" }

// Error satisfies the builtin error interface
func (e UserCameraValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCamera.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCameraValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCameraValidationError{}

// Validate checks the field values on ShowCameraRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ShowCameraRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetCameraId() < 1 {
		return ShowCameraRequestValidationError{
			field:  "CameraId",
			reason: "value must be greater than or equal to 1",
		}
	}

	return nil
}

// ShowCameraRequestValidationError is the validation error returned by
// ShowCameraRequest.Validate if the designated constraints aren't met.
type ShowCameraRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowCameraRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowCameraRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowCameraRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowCameraRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowCameraRequestValidationError) ErrorName() string {
	return "ShowCameraRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShowCameraRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowCameraRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowCameraRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowCameraRequestValidationError{}

// Validate checks the field values on CamerasResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CamerasResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for No

	return nil
}

// CamerasResponseValidationError is the validation error returned by
// CamerasResponse.Validate if the designated constraints aren't met.
type CamerasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CamerasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CamerasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CamerasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CamerasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CamerasResponseValidationError) ErrorName() string { return "CamerasResponseValidationError" }

// Error satisfies the builtin error interface
func (e CamerasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCamerasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CamerasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CamerasResponseValidationError{}

// Validate checks the field values on UpdateCameraRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCameraRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UpdateType

	if m.GetCameraId() < 1 {
		return UpdateCameraRequestValidationError{
			field:  "CameraId",
			reason: "value must be greater than or equal to 1",
		}
	}

	// no validation rules for Password

	// no validation rules for IsAlarm

	// no validation rules for Name

	return nil
}

// UpdateCameraRequestValidationError is the validation error returned by
// UpdateCameraRequest.Validate if the designated constraints aren't met.
type UpdateCameraRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCameraRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCameraRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCameraRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCameraRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCameraRequestValidationError) ErrorName() string {
	return "UpdateCameraRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCameraRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCameraRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCameraRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCameraRequestValidationError{}

// Validate checks the field values on ResetCameraRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResetCameraRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetCameraId() < 1 {
		return ResetCameraRequestValidationError{
			field:  "CameraId",
			reason: "value must be greater than or equal to 1",
		}
	}

	return nil
}

// ResetCameraRequestValidationError is the validation error returned by
// ResetCameraRequest.Validate if the designated constraints aren't met.
type ResetCameraRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCameraRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetCameraRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetCameraRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetCameraRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCameraRequestValidationError) ErrorName() string {
	return "ResetCameraRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCameraRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCameraRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCameraRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCameraRequestValidationError{}

// Validate checks the field values on BindCameraRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BindCameraRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetNo()) < 1 {
		return BindCameraRequestValidationError{
			field:  "No",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// BindCameraRequestValidationError is the validation error returned by
// BindCameraRequest.Validate if the designated constraints aren't met.
type BindCameraRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindCameraRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindCameraRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindCameraRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindCameraRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindCameraRequestValidationError) ErrorName() string {
	return "BindCameraRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BindCameraRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindCameraRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindCameraRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindCameraRequestValidationError{}

// Validate checks the field values on BindCameraResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BindCameraResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for IsSuccess

	// no validation rules for PhoneNumber

	return nil
}

// BindCameraResponseValidationError is the validation error returned by
// BindCameraResponse.Validate if the designated constraints aren't met.
type BindCameraResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindCameraResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindCameraResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindCameraResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindCameraResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindCameraResponseValidationError) ErrorName() string {
	return "BindCameraResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BindCameraResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindCameraResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindCameraResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindCameraResponseValidationError{}

// Validate checks the field values on ListUserCameraResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListUserCameraResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetUserCameras() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserCameraResponseValidationError{
					field:  fmt.Sprintf("UserCameras[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListUserCameraResponseValidationError is the validation error returned by
// ListUserCameraResponse.Validate if the designated constraints aren't met.
type ListUserCameraResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserCameraResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserCameraResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserCameraResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserCameraResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserCameraResponseValidationError) ErrorName() string {
	return "ListUserCameraResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserCameraResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserCameraResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserCameraResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserCameraResponseValidationError{}

// Validate checks the field values on UpdateSharePermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSharePermissionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetShareId() <= 0 {
		return UpdateSharePermissionRequestValidationError{
			field:  "ShareId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetUserId() <= 0 {
		return UpdateSharePermissionRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetPermission() < 0 {
		return UpdateSharePermissionRequestValidationError{
			field:  "Permission",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// UpdateSharePermissionRequestValidationError is the validation error returned
// by UpdateSharePermissionRequest.Validate if the designated constraints
// aren't met.
type UpdateSharePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSharePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSharePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSharePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSharePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSharePermissionRequestValidationError) ErrorName() string {
	return "UpdateSharePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSharePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSharePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSharePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSharePermissionRequestValidationError{}

// Validate checks the field values on AddShareRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddShareRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetCameraId() <= 0 {
		return AddShareRequestValidationError{
			field:  "CameraId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetUserId() <= 0 {
		return AddShareRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetPermission() < 0 {
		return AddShareRequestValidationError{
			field:  "Permission",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// AddShareRequestValidationError is the validation error returned by
// AddShareRequest.Validate if the designated constraints aren't met.
type AddShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddShareRequestValidationError) ErrorName() string { return "AddShareRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddShareRequestValidationError{}

// Validate checks the field values on CancelShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelShareRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetShareId() <= 0 {
		return CancelShareRequestValidationError{
			field:  "ShareId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// CancelShareRequestValidationError is the validation error returned by
// CancelShareRequest.Validate if the designated constraints aren't met.
type CancelShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelShareRequestValidationError) ErrorName() string {
	return "CancelShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelShareRequestValidationError{}

// Validate checks the field values on DeleteShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteShareRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetShareId() <= 0 {
		return DeleteShareRequestValidationError{
			field:  "ShareId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DeleteShareRequestValidationError is the validation error returned by
// DeleteShareRequest.Validate if the designated constraints aren't met.
type DeleteShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShareRequestValidationError) ErrorName() string {
	return "DeleteShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShareRequestValidationError{}
