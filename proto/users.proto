syntax = "proto3";
package users_pb;
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate.proto";
import "google/protobuf/empty.proto";
option go_package = ".;users_pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Camera System OpenAPI";
    version: "v0.01";
  };
  external_docs: {
    url: "http://localhost:8001/";
    description: "Camera System Open API";
  };
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "X-Camera-Token"
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
      }
    }
  }
  security: {
    security_requirement: {
      key: "bearer"
    }
  }
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
};
service UserService {
  // Login登录， 判断是否注册，没有注册直接注册
  rpc Login(LoginRequest)returns(LoginResponse){
    option (google.api.http) = {
      post: "/v1/login",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "用户登录",
      description: "根据手机号码与密码进行登录",
      tags: "用户",
      security: {}
    };
  };

  // GetCaptcha获取验证码
  rpc GetCaptcha(GetCaptchaRequest)returns(google.protobuf.Empty){
    option (google.api.http) = {
      get: "/v1/captcha/{phone_number}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取验证码",
      description: "根据手机号码获取验证码",
      tags: "用户",
      security: {}
    };
  };

  // VerifyCaptcha 校验验证码
  rpc VerifyCaptcha(VerifyCaptchaRequest)returns(VerifyCaptchaResponse){
    option (google.api.http) = {
      get: "/v1/captcha/{phone_number}/{captcha}/verify",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "校验验证码",
      description: "校验验证码",
      tags: "用户",
      security: {}
    };
  };

  // UpdateUserInfo 更新用户信息
  rpc UpdateUserInfo(UpdateUserInfoRequest)returns(UpdateUserInfoResponse) {
    option (google.api.http) = {
      put: "/v1/user/nickname",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "更新用户昵称",
      description: "更新用户昵称",
      tags: "用户"
    };
  };
  // 上传头像
  rpc Upload(UploadAvatarRequest)returns(UploadAvatarResponse){
    option (google.api.http) = {
      post: "/v1/user/avatar",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "更新头像",
      description: "更新头像",
      tags: "用户"
    };
  }
  // 查询用户信息
  rpc ShowUser(google.protobuf.Empty)returns(User) {
    option (google.api.http) = {
      get: "/v1/user",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取用户信息",
      description: "获取用户信息",
      tags: "用户"
    };
  };
}

message LoginRequest {
  string phone_number = 1 [(validate.rules).string = {pattern: "^1[3|5|7|8][0-9]{9}$"}];
  string captcha = 2 [(validate.rules).string.len = 6];
}

message LoginResponse {
  string token = 1;
}

// 获取验证码
message GetCaptchaRequest {
  string phone_number = 1 [(validate.rules).string = {pattern: "^1[3|5|7|8][0-9]{9}$"}];
}

// 校验验证码
message VerifyCaptchaRequest {
  string phone_number = 1 [(validate.rules).string = {pattern: "^1[3|5|7|8][0-9]{9}$"}];
  string captcha = 2 [(validate.rules).string.len = 6];
}

message VerifyCaptchaResponse {
  bool verified = 1;
}




message User {
  string phone_number = 2;
  int64 last_login_at = 3;
  string last_login_ip = 4;
  int32 status = 5;
  int64 created_at = 6;
  int64 updated_at = 7;
  string avatar = 8;
  string nickname = 9;
}
// 更新用户信息
message UpdateUserInfoRequest {
  string nickname = 2;
}

message UpdateUserInfoResponse {
  string nickname = 1;
}



//
message UploadAvatarRequest {
  string avatar = 1;
}
message UploadAvatarResponse {
  string image_url = 1;
}
