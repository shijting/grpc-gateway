// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: camera_messages.proto

package camera_messages_pb

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AddCameraMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraId uint32 `protobuf:"varint,1,opt,name=camera_id,json=cameraId,proto3" json:"camera_id,omitempty"`
	VideoUrl string `protobuf:"bytes,3,opt,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty"`
	ImageUrl string `protobuf:"bytes,4,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Title    string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *AddCameraMessageRequest) Reset() {
	*x = AddCameraMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCameraMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCameraMessageRequest) ProtoMessage() {}

func (x *AddCameraMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCameraMessageRequest.ProtoReflect.Descriptor instead.
func (*AddCameraMessageRequest) Descriptor() ([]byte, []int) {
	return file_camera_messages_proto_rawDescGZIP(), []int{0}
}

func (x *AddCameraMessageRequest) GetCameraId() uint32 {
	if x != nil {
		return x.CameraId
	}
	return 0
}

func (x *AddCameraMessageRequest) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *AddCameraMessageRequest) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *AddCameraMessageRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type CameraMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 设备id
	CameraId uint32 `protobuf:"varint,2,opt,name=camera_id,json=cameraId,proto3" json:"camera_id,omitempty"`
	// 设备名称
	CameraName string `protobuf:"bytes,3,opt,name=camera_name,json=cameraName,proto3" json:"camera_name,omitempty"`
	VideoUrl   string `protobuf:"bytes,4,opt,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty"`
	ImageUrl   string `protobuf:"bytes,5,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// 标题
	Title string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	// 是否已读
	IsRead    bool  `protobuf:"varint,7,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`
	CreatedAt int64 `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64 `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *CameraMessage) Reset() {
	*x = CameraMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraMessage) ProtoMessage() {}

func (x *CameraMessage) ProtoReflect() protoreflect.Message {
	mi := &file_camera_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraMessage.ProtoReflect.Descriptor instead.
func (*CameraMessage) Descriptor() ([]byte, []int) {
	return file_camera_messages_proto_rawDescGZIP(), []int{1}
}

func (x *CameraMessage) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CameraMessage) GetCameraId() uint32 {
	if x != nil {
		return x.CameraId
	}
	return 0
}

func (x *CameraMessage) GetCameraName() string {
	if x != nil {
		return x.CameraName
	}
	return ""
}

func (x *CameraMessage) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *CameraMessage) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *CameraMessage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CameraMessage) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *CameraMessage) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CameraMessage) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type CameraMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraId uint32 `protobuf:"varint,1,opt,name=camera_id,json=cameraId,proto3" json:"camera_id,omitempty"`
	Offset   int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit    int64  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *CameraMessagesRequest) Reset() {
	*x = CameraMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraMessagesRequest) ProtoMessage() {}

func (x *CameraMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraMessagesRequest.ProtoReflect.Descriptor instead.
func (*CameraMessagesRequest) Descriptor() ([]byte, []int) {
	return file_camera_messages_proto_rawDescGZIP(), []int{2}
}

func (x *CameraMessagesRequest) GetCameraId() uint32 {
	if x != nil {
		return x.CameraId
	}
	return 0
}

func (x *CameraMessagesRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *CameraMessagesRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type CameraMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraMessages []*CameraMessage `protobuf:"bytes,1,rep,name=cameraMessages,proto3" json:"cameraMessages,omitempty"`
}

func (x *CameraMessagesResponse) Reset() {
	*x = CameraMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraMessagesResponse) ProtoMessage() {}

func (x *CameraMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraMessagesResponse.ProtoReflect.Descriptor instead.
func (*CameraMessagesResponse) Descriptor() ([]byte, []int) {
	return file_camera_messages_proto_rawDescGZIP(), []int{3}
}

func (x *CameraMessagesResponse) GetCameraMessages() []*CameraMessage {
	if x != nil {
		return x.CameraMessages
	}
	return nil
}

type ListCameraMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ListCameraMessagesRequest) Reset() {
	*x = ListCameraMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCameraMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCameraMessagesRequest) ProtoMessage() {}

func (x *ListCameraMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCameraMessagesRequest.ProtoReflect.Descriptor instead.
func (*ListCameraMessagesRequest) Descriptor() ([]byte, []int) {
	return file_camera_messages_proto_rawDescGZIP(), []int{4}
}

func (x *ListCameraMessagesRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ListCameraMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraMessages []*CameraMessage `protobuf:"bytes,1,rep,name=cameraMessages,proto3" json:"cameraMessages,omitempty"`
}

func (x *ListCameraMessagesResponse) Reset() {
	*x = ListCameraMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCameraMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCameraMessagesResponse) ProtoMessage() {}

func (x *ListCameraMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCameraMessagesResponse.ProtoReflect.Descriptor instead.
func (*ListCameraMessagesResponse) Descriptor() ([]byte, []int) {
	return file_camera_messages_proto_rawDescGZIP(), []int{5}
}

func (x *ListCameraMessagesResponse) GetCameraMessages() []*CameraMessage {
	if x != nil {
		return x.CameraMessages
	}
	return nil
}

type DeleteCameraMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraId uint32 `protobuf:"varint,1,opt,name=camera_id,json=cameraId,proto3" json:"camera_id,omitempty"`
}

func (x *DeleteCameraMessagesRequest) Reset() {
	*x = DeleteCameraMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCameraMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCameraMessagesRequest) ProtoMessage() {}

func (x *DeleteCameraMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCameraMessagesRequest.ProtoReflect.Descriptor instead.
func (*DeleteCameraMessagesRequest) Descriptor() ([]byte, []int) {
	return file_camera_messages_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteCameraMessagesRequest) GetCameraId() uint32 {
	if x != nil {
		return x.CameraId
	}
	return 0
}

type DeleteCameraMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// camera_message_id
	MessageId uint32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *DeleteCameraMessageRequest) Reset() {
	*x = DeleteCameraMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCameraMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCameraMessageRequest) ProtoMessage() {}

func (x *DeleteCameraMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCameraMessageRequest.ProtoReflect.Descriptor instead.
func (*DeleteCameraMessageRequest) Descriptor() ([]byte, []int) {
	return file_camera_messages_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteCameraMessageRequest) GetMessageId() uint32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

type ReadUserCameraMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraId uint32 `protobuf:"varint,1,opt,name=camera_id,json=cameraId,proto3" json:"camera_id,omitempty"`
}

func (x *ReadUserCameraMessageRequest) Reset() {
	*x = ReadUserCameraMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadUserCameraMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadUserCameraMessageRequest) ProtoMessage() {}

func (x *ReadUserCameraMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadUserCameraMessageRequest.ProtoReflect.Descriptor instead.
func (*ReadUserCameraMessageRequest) Descriptor() ([]byte, []int) {
	return file_camera_messages_proto_rawDescGZIP(), []int{8}
}

func (x *ReadUserCameraMessageRequest) GetCameraId() uint32 {
	if x != nil {
		return x.CameraId
	}
	return 0
}

var File_camera_messages_proto protoreflect.FileDescriptor

var file_camera_messages_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x08,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x84, 0x02, 0x0a, 0x0d, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x80, 0x01, 0x0a, 0x15, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x20, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x22, 0x05, 0x18, 0xf4, 0x03, 0x28, 0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x63, 0x0a, 0x16, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x3d, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70,
	0x62, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x0e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22,
	0x43, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x09, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x1c, 0x52, 0x65,
	0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64,
	0x32, 0xdb, 0x09, 0x0a, 0x14, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x10, 0x41, 0x64,
	0x64, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b,
	0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x59, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x38, 0x0a, 0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb6,
	0x88, 0xe6, 0x81, 0xaf, 0x12, 0x12, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x1a, 0x12, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x62, 0x00, 0x12, 0xcf,
	0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2e, 0x2e, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70,
	0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x92,
	0x41, 0x4e, 0x0a, 0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf,
	0x12, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89,
	0x80, 0xe6, 0x9c, 0x89, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf,
	0x1a, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89,
	0x80, 0xe6, 0x9c, 0x89, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf,
	0x12, 0xcc, 0x01, 0x0a, 0x11, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5f, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x36, 0x0a, 0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4,
	0x87, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x12, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8,
	0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x1a, 0x12, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x12,
	0xcd, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x42, 0x0a, 0x0c, 0xe8,
	0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x12, 0x18, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe6,
	0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x1a, 0x18, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xae, 0xbe,
	0xe5, 0xa4, 0x87, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x12,
	0xbf, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x36, 0x0a, 0x0c, 0xe8, 0xae, 0xbe,
	0xe5, 0xa4, 0x87, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x12, 0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99,
	0xa4, 0xe4, 0xb8, 0x80, 0xe6, 0x9d, 0xa1, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x1a, 0x12, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe4, 0xb8, 0x80, 0xe6, 0x9d, 0xa1, 0xe6, 0xb6, 0x88, 0xe6, 0x81,
	0xaf, 0x12, 0xda, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x2e, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x77, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x1a, 0x24, 0x2f,
	0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x69, 0x64, 0x7d, 0x92, 0x41, 0x48, 0x0a, 0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb6,
	0x88, 0xe6, 0x81, 0xaf, 0x12, 0x1b, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb6, 0x88, 0xe6,
	0x81, 0xaf, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0xba, 0xe5, 0xb7, 0xb2, 0xe8, 0xaf,
	0xbb, 0x1a, 0x1b, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0xe8,
	0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0xba, 0xe5, 0xb7, 0xb2, 0xe8, 0xaf, 0xbb, 0x42, 0xfd,
	0x01, 0x5a, 0x14, 0x2e, 0x3b, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x62, 0x92, 0x41, 0xe3, 0x01, 0x12, 0x1e, 0x0a, 0x15, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x4f, 0x70, 0x65,
	0x6e, 0x41, 0x50, 0x49, 0x32, 0x05, 0x76, 0x30, 0x2e, 0x30, 0x31, 0x2a, 0x01, 0x01, 0x32, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x5a, 0x5a, 0x0a, 0x58, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x4e,
	0x08, 0x02, 0x12, 0x38, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x42, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x20, 0x3c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a, 0x0e, 0x58, 0x2d,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x02, 0x62, 0x0c,
	0x0a, 0x0a, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x00, 0x72, 0x30, 0x0a, 0x16,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x4f, 0x70,
	0x65, 0x6e, 0x20, 0x41, 0x50, 0x49, 0x12, 0x16, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x38, 0x30, 0x30, 0x31, 0x2f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_camera_messages_proto_rawDescOnce sync.Once
	file_camera_messages_proto_rawDescData = file_camera_messages_proto_rawDesc
)

func file_camera_messages_proto_rawDescGZIP() []byte {
	file_camera_messages_proto_rawDescOnce.Do(func() {
		file_camera_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_camera_messages_proto_rawDescData)
	})
	return file_camera_messages_proto_rawDescData
}

var file_camera_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_camera_messages_proto_goTypes = []interface{}{
	(*AddCameraMessageRequest)(nil),      // 0: camera_messages_pb.AddCameraMessageRequest
	(*CameraMessage)(nil),                // 1: camera_messages_pb.CameraMessage
	(*CameraMessagesRequest)(nil),        // 2: camera_messages_pb.CameraMessagesRequest
	(*CameraMessagesResponse)(nil),       // 3: camera_messages_pb.CameraMessagesResponse
	(*ListCameraMessagesRequest)(nil),    // 4: camera_messages_pb.ListCameraMessagesRequest
	(*ListCameraMessagesResponse)(nil),   // 5: camera_messages_pb.ListCameraMessagesResponse
	(*DeleteCameraMessagesRequest)(nil),  // 6: camera_messages_pb.DeleteCameraMessagesRequest
	(*DeleteCameraMessageRequest)(nil),   // 7: camera_messages_pb.DeleteCameraMessageRequest
	(*ReadUserCameraMessageRequest)(nil), // 8: camera_messages_pb.ReadUserCameraMessageRequest
	(*empty.Empty)(nil),                  // 9: google.protobuf.Empty
}
var file_camera_messages_proto_depIdxs = []int32{
	1, // 0: camera_messages_pb.CameraMessagesResponse.cameraMessages:type_name -> camera_messages_pb.CameraMessage
	1, // 1: camera_messages_pb.ListCameraMessagesResponse.cameraMessages:type_name -> camera_messages_pb.CameraMessage
	0, // 2: camera_messages_pb.CameraMessageService.AddCameraMessage:input_type -> camera_messages_pb.AddCameraMessageRequest
	9, // 3: camera_messages_pb.CameraMessageService.ListCameraMessage:input_type -> google.protobuf.Empty
	2, // 4: camera_messages_pb.CameraMessageService.ShowCameraMessage:input_type -> camera_messages_pb.CameraMessagesRequest
	6, // 5: camera_messages_pb.CameraMessageService.DeleteCameraMessages:input_type -> camera_messages_pb.DeleteCameraMessagesRequest
	7, // 6: camera_messages_pb.CameraMessageService.DeleteCameraMessage:input_type -> camera_messages_pb.DeleteCameraMessageRequest
	8, // 7: camera_messages_pb.CameraMessageService.ReadUserCameraMessage:input_type -> camera_messages_pb.ReadUserCameraMessageRequest
	9, // 8: camera_messages_pb.CameraMessageService.AddCameraMessage:output_type -> google.protobuf.Empty
	5, // 9: camera_messages_pb.CameraMessageService.ListCameraMessage:output_type -> camera_messages_pb.ListCameraMessagesResponse
	3, // 10: camera_messages_pb.CameraMessageService.ShowCameraMessage:output_type -> camera_messages_pb.CameraMessagesResponse
	9, // 11: camera_messages_pb.CameraMessageService.DeleteCameraMessages:output_type -> google.protobuf.Empty
	9, // 12: camera_messages_pb.CameraMessageService.DeleteCameraMessage:output_type -> google.protobuf.Empty
	9, // 13: camera_messages_pb.CameraMessageService.ReadUserCameraMessage:output_type -> google.protobuf.Empty
	8, // [8:14] is the sub-list for method output_type
	2, // [2:8] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_camera_messages_proto_init() }
func file_camera_messages_proto_init() {
	if File_camera_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_camera_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCameraMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCameraMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCameraMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCameraMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCameraMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadUserCameraMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_camera_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_camera_messages_proto_goTypes,
		DependencyIndexes: file_camera_messages_proto_depIdxs,
		MessageInfos:      file_camera_messages_proto_msgTypes,
	}.Build()
	File_camera_messages_proto = out.File
	file_camera_messages_proto_rawDesc = nil
	file_camera_messages_proto_goTypes = nil
	file_camera_messages_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CameraMessageServiceClient is the client API for CameraMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CameraMessageServiceClient interface {
	AddCameraMessage(ctx context.Context, in *AddCameraMessageRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// 获取用户所有设备消息
	ListCameraMessage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListCameraMessagesResponse, error)
	// 获取单个设备消息
	ShowCameraMessage(ctx context.Context, in *CameraMessagesRequest, opts ...grpc.CallOption) (*CameraMessagesResponse, error)
	// 删除设备所有消息
	DeleteCameraMessages(ctx context.Context, in *DeleteCameraMessagesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// 删除一条消息
	DeleteCameraMessage(ctx context.Context, in *DeleteCameraMessageRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// 设备消息设置为已读
	ReadUserCameraMessage(ctx context.Context, in *ReadUserCameraMessageRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type cameraMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCameraMessageServiceClient(cc grpc.ClientConnInterface) CameraMessageServiceClient {
	return &cameraMessageServiceClient{cc}
}

func (c *cameraMessageServiceClient) AddCameraMessage(ctx context.Context, in *AddCameraMessageRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/camera_messages_pb.CameraMessageService/AddCameraMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraMessageServiceClient) ListCameraMessage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListCameraMessagesResponse, error) {
	out := new(ListCameraMessagesResponse)
	err := c.cc.Invoke(ctx, "/camera_messages_pb.CameraMessageService/ListCameraMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraMessageServiceClient) ShowCameraMessage(ctx context.Context, in *CameraMessagesRequest, opts ...grpc.CallOption) (*CameraMessagesResponse, error) {
	out := new(CameraMessagesResponse)
	err := c.cc.Invoke(ctx, "/camera_messages_pb.CameraMessageService/ShowCameraMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraMessageServiceClient) DeleteCameraMessages(ctx context.Context, in *DeleteCameraMessagesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/camera_messages_pb.CameraMessageService/DeleteCameraMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraMessageServiceClient) DeleteCameraMessage(ctx context.Context, in *DeleteCameraMessageRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/camera_messages_pb.CameraMessageService/DeleteCameraMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraMessageServiceClient) ReadUserCameraMessage(ctx context.Context, in *ReadUserCameraMessageRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/camera_messages_pb.CameraMessageService/ReadUserCameraMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CameraMessageServiceServer is the server API for CameraMessageService service.
type CameraMessageServiceServer interface {
	AddCameraMessage(context.Context, *AddCameraMessageRequest) (*empty.Empty, error)
	// 获取用户所有设备消息
	ListCameraMessage(context.Context, *empty.Empty) (*ListCameraMessagesResponse, error)
	// 获取单个设备消息
	ShowCameraMessage(context.Context, *CameraMessagesRequest) (*CameraMessagesResponse, error)
	// 删除设备所有消息
	DeleteCameraMessages(context.Context, *DeleteCameraMessagesRequest) (*empty.Empty, error)
	// 删除一条消息
	DeleteCameraMessage(context.Context, *DeleteCameraMessageRequest) (*empty.Empty, error)
	// 设备消息设置为已读
	ReadUserCameraMessage(context.Context, *ReadUserCameraMessageRequest) (*empty.Empty, error)
}

// UnimplementedCameraMessageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCameraMessageServiceServer struct {
}

func (*UnimplementedCameraMessageServiceServer) AddCameraMessage(context.Context, *AddCameraMessageRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCameraMessage not implemented")
}
func (*UnimplementedCameraMessageServiceServer) ListCameraMessage(context.Context, *empty.Empty) (*ListCameraMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCameraMessage not implemented")
}
func (*UnimplementedCameraMessageServiceServer) ShowCameraMessage(context.Context, *CameraMessagesRequest) (*CameraMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCameraMessage not implemented")
}
func (*UnimplementedCameraMessageServiceServer) DeleteCameraMessages(context.Context, *DeleteCameraMessagesRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCameraMessages not implemented")
}
func (*UnimplementedCameraMessageServiceServer) DeleteCameraMessage(context.Context, *DeleteCameraMessageRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCameraMessage not implemented")
}
func (*UnimplementedCameraMessageServiceServer) ReadUserCameraMessage(context.Context, *ReadUserCameraMessageRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUserCameraMessage not implemented")
}

func RegisterCameraMessageServiceServer(s *grpc.Server, srv CameraMessageServiceServer) {
	s.RegisterService(&_CameraMessageService_serviceDesc, srv)
}

func _CameraMessageService_AddCameraMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCameraMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraMessageServiceServer).AddCameraMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/camera_messages_pb.CameraMessageService/AddCameraMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraMessageServiceServer).AddCameraMessage(ctx, req.(*AddCameraMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraMessageService_ListCameraMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraMessageServiceServer).ListCameraMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/camera_messages_pb.CameraMessageService/ListCameraMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraMessageServiceServer).ListCameraMessage(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraMessageService_ShowCameraMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CameraMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraMessageServiceServer).ShowCameraMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/camera_messages_pb.CameraMessageService/ShowCameraMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraMessageServiceServer).ShowCameraMessage(ctx, req.(*CameraMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraMessageService_DeleteCameraMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCameraMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraMessageServiceServer).DeleteCameraMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/camera_messages_pb.CameraMessageService/DeleteCameraMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraMessageServiceServer).DeleteCameraMessages(ctx, req.(*DeleteCameraMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraMessageService_DeleteCameraMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCameraMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraMessageServiceServer).DeleteCameraMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/camera_messages_pb.CameraMessageService/DeleteCameraMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraMessageServiceServer).DeleteCameraMessage(ctx, req.(*DeleteCameraMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraMessageService_ReadUserCameraMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUserCameraMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraMessageServiceServer).ReadUserCameraMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/camera_messages_pb.CameraMessageService/ReadUserCameraMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraMessageServiceServer).ReadUserCameraMessage(ctx, req.(*ReadUserCameraMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CameraMessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "camera_messages_pb.CameraMessageService",
	HandlerType: (*CameraMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCameraMessage",
			Handler:    _CameraMessageService_AddCameraMessage_Handler,
		},
		{
			MethodName: "ListCameraMessage",
			Handler:    _CameraMessageService_ListCameraMessage_Handler,
		},
		{
			MethodName: "ShowCameraMessage",
			Handler:    _CameraMessageService_ShowCameraMessage_Handler,
		},
		{
			MethodName: "DeleteCameraMessages",
			Handler:    _CameraMessageService_DeleteCameraMessages_Handler,
		},
		{
			MethodName: "DeleteCameraMessage",
			Handler:    _CameraMessageService_DeleteCameraMessage_Handler,
		},
		{
			MethodName: "ReadUserCameraMessage",
			Handler:    _CameraMessageService_ReadUserCameraMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "camera_messages.proto",
}
