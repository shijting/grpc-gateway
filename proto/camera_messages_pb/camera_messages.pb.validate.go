// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: camera_messages.proto

package camera_messages_pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _camera_messages_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on AddCameraMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddCameraMessageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetCameraId() <= 0 {
		return AddCameraMessageRequestValidationError{
			field:  "CameraId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for VideoUrl

	// no validation rules for ImageUrl

	// no validation rules for Title

	return nil
}

// AddCameraMessageRequestValidationError is the validation error returned by
// AddCameraMessageRequest.Validate if the designated constraints aren't met.
type AddCameraMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCameraMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCameraMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCameraMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCameraMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCameraMessageRequestValidationError) ErrorName() string {
	return "AddCameraMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCameraMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCameraMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCameraMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCameraMessageRequestValidationError{}

// Validate checks the field values on CameraMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CameraMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CameraId

	// no validation rules for CameraName

	// no validation rules for VideoUrl

	// no validation rules for ImageUrl

	// no validation rules for Title

	// no validation rules for IsRead

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	return nil
}

// CameraMessageValidationError is the validation error returned by
// CameraMessage.Validate if the designated constraints aren't met.
type CameraMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CameraMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CameraMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CameraMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CameraMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CameraMessageValidationError) ErrorName() string { return "CameraMessageValidationError" }

// Error satisfies the builtin error interface
func (e CameraMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCameraMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CameraMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CameraMessageValidationError{}

// Validate checks the field values on CameraMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CameraMessagesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetCameraId() <= 0 {
		return CameraMessagesRequestValidationError{
			field:  "CameraId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetOffset() < 0 {
		return CameraMessagesRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
	}

	if val := m.GetLimit(); val < 10 || val > 500 {
		return CameraMessagesRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range [10, 500]",
		}
	}

	return nil
}

// CameraMessagesRequestValidationError is the validation error returned by
// CameraMessagesRequest.Validate if the designated constraints aren't met.
type CameraMessagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CameraMessagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CameraMessagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CameraMessagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CameraMessagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CameraMessagesRequestValidationError) ErrorName() string {
	return "CameraMessagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CameraMessagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCameraMessagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CameraMessagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CameraMessagesRequestValidationError{}

// Validate checks the field values on CameraMessagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CameraMessagesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetCameraMessages() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CameraMessagesResponseValidationError{
					field:  fmt.Sprintf("CameraMessages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CameraMessagesResponseValidationError is the validation error returned by
// CameraMessagesResponse.Validate if the designated constraints aren't met.
type CameraMessagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CameraMessagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CameraMessagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CameraMessagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CameraMessagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CameraMessagesResponseValidationError) ErrorName() string {
	return "CameraMessagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CameraMessagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCameraMessagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CameraMessagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CameraMessagesResponseValidationError{}

// Validate checks the field values on ListCameraMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCameraMessagesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() <= 0 {
		return ListCameraMessagesRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// ListCameraMessagesRequestValidationError is the validation error returned by
// ListCameraMessagesRequest.Validate if the designated constraints aren't met.
type ListCameraMessagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCameraMessagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCameraMessagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCameraMessagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCameraMessagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCameraMessagesRequestValidationError) ErrorName() string {
	return "ListCameraMessagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCameraMessagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCameraMessagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCameraMessagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCameraMessagesRequestValidationError{}

// Validate checks the field values on ListCameraMessagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCameraMessagesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetCameraMessages() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCameraMessagesResponseValidationError{
					field:  fmt.Sprintf("CameraMessages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCameraMessagesResponseValidationError is the validation error returned
// by ListCameraMessagesResponse.Validate if the designated constraints aren't met.
type ListCameraMessagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCameraMessagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCameraMessagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCameraMessagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCameraMessagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCameraMessagesResponseValidationError) ErrorName() string {
	return "ListCameraMessagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCameraMessagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCameraMessagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCameraMessagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCameraMessagesResponseValidationError{}

// Validate checks the field values on DeleteCameraMessagesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCameraMessagesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetCameraId() <= 0 {
		return DeleteCameraMessagesRequestValidationError{
			field:  "CameraId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DeleteCameraMessagesRequestValidationError is the validation error returned
// by DeleteCameraMessagesRequest.Validate if the designated constraints
// aren't met.
type DeleteCameraMessagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCameraMessagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCameraMessagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCameraMessagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCameraMessagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCameraMessagesRequestValidationError) ErrorName() string {
	return "DeleteCameraMessagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCameraMessagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCameraMessagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCameraMessagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCameraMessagesRequestValidationError{}

// Validate checks the field values on DeleteCameraMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCameraMessageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetMessageId() <= 0 {
		return DeleteCameraMessageRequestValidationError{
			field:  "MessageId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DeleteCameraMessageRequestValidationError is the validation error returned
// by DeleteCameraMessageRequest.Validate if the designated constraints aren't met.
type DeleteCameraMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCameraMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCameraMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCameraMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCameraMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCameraMessageRequestValidationError) ErrorName() string {
	return "DeleteCameraMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCameraMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCameraMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCameraMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCameraMessageRequestValidationError{}

// Validate checks the field values on ReadUserCameraMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadUserCameraMessageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetCameraId() <= 0 {
		return ReadUserCameraMessageRequestValidationError{
			field:  "CameraId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// ReadUserCameraMessageRequestValidationError is the validation error returned
// by ReadUserCameraMessageRequest.Validate if the designated constraints
// aren't met.
type ReadUserCameraMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadUserCameraMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadUserCameraMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadUserCameraMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadUserCameraMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadUserCameraMessageRequestValidationError) ErrorName() string {
	return "ReadUserCameraMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadUserCameraMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadUserCameraMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadUserCameraMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadUserCameraMessageRequestValidationError{}
